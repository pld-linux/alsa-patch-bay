diff -aurN alsa-patch-bay-1.0.0.orig/m4/aclocal-include.m4 alsa-patch-bay-1.0.0/m4/aclocal-include.m4
--- alsa-patch-bay-1.0.0.orig/m4/aclocal-include.m4	1970-01-01 01:00:00.000000000 +0100
+++ alsa-patch-bay-1.0.0/m4/aclocal-include.m4	2002-02-19 19:59:18.000000000 +0100
@@ -0,0 +1,16 @@
+# aclocal-include.m4
+# 
+# This macro adds the name macrodir to the set of directories
+# that `aclocal' searches for macros.  
+
+# serial 1
+
+dnl AM_ACLOCAL_INCLUDE(macrodir)
+AC_DEFUN([AM_ACLOCAL_INCLUDE],
+[
+	AM_CONDITIONAL(INSIDE_GNOME_COMMON, test x = y)
+
+	test -n "$ACLOCAL_FLAGS" && ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"
+
+	for k in $1 ; do ACLOCAL="$ACLOCAL -I $k" ; done
+])
diff -aurN alsa-patch-bay-1.0.0.orig/m4/alsa.m4 alsa-patch-bay-1.0.0/m4/alsa.m4
--- alsa-patch-bay-1.0.0.orig/m4/alsa.m4	1970-01-01 01:00:00.000000000 +0100
+++ alsa-patch-bay-1.0.0/m4/alsa.m4	2002-03-01 22:58:41.000000000 +0100
@@ -0,0 +1,146 @@
+dnl Configure Paths for Alsa
+dnl Some modifications by Richard Boulton <richard-alsa@tartarus.org>
+dnl Christopher Lansdown <lansdoct@cs.alfred.edu>
+dnl Jaroslav Kysela <perex@suse.cz>
+dnl Last modification: alsa.m4,v 1.19 2001/12/19 07:28:40 perex Exp
+dnl AM_PATH_ALSA([MINIMUM-VERSION [, ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])
+dnl Test for libasound, and define ALSA_CFLAGS and ALSA_LIBS as appropriate.
+dnl enables arguments --with-alsa-prefix=
+dnl                   --with-alsa-enc-prefix=
+dnl                   --disable-alsatest  (this has no effect, as yet)
+dnl
+dnl For backwards compatibility, if ACTION_IF_NOT_FOUND is not specified,
+dnl and the alsa libraries are not found, a fatal AC_MSG_ERROR() will result.
+dnl
+AC_DEFUN(AM_PATH_ALSA,
+[dnl Save the original CFLAGS, LDFLAGS, and LIBS
+alsa_save_CFLAGS="$CFLAGS"
+alsa_save_LDFLAGS="$LDFLAGS"
+alsa_save_LIBS="$LIBS"
+alsa_found=yes
+
+dnl
+dnl Get the cflags and libraries for alsa
+dnl
+AC_ARG_WITH(alsa-prefix,
+[  --with-alsa-prefix=PFX  Prefix where Alsa library is installed(optional)],
+[alsa_prefix="$withval"], [alsa_prefix=""])
+
+AC_ARG_WITH(alsa-inc-prefix,
+[  --with-alsa-inc-prefix=PFX  Prefix where include libraries are (optional)],
+[alsa_inc_prefix="$withval"], [alsa_inc_prefix=""])
+
+dnl FIXME: this is not yet implemented
+AC_ARG_ENABLE(alsatest,
+[  --disable-alsatest      Do not try to compile and run a test Alsa program],
+[enable_alsatest=no],
+[enable_alsatest=yes])
+
+dnl Add any special include directories
+AC_MSG_CHECKING(for ALSA CFLAGS)
+if test "$alsa_inc_prefix" != "" ; then
+	ALSA_CFLAGS="$ALSA_CFLAGS -I$alsa_inc_prefix"
+	CFLAGS="$CFLAGS -I$alsa_inc_prefix"
+fi
+AC_MSG_RESULT($ALSA_CFLAGS)
+
+dnl add any special lib dirs
+AC_MSG_CHECKING(for ALSA LDFLAGS)
+if test "$alsa_prefix" != "" ; then
+	ALSA_LIBS="$ALSA_LIBS -L$alsa_prefix"
+	LDFLAGS="$LDFLAGS $ALSA_LIBS"
+fi
+
+dnl add the alsa library
+ALSA_LIBS="$ALSA_LIBS -lasound -lm -ldl -lpthread"
+LIBS=`echo $LIBS | sed 's/-lm//'`
+LIBS=`echo $LIBS | sed 's/-ldl//'`
+LIBS=`echo $LIBS | sed 's/-lpthread//'`
+LIBS=`echo $LIBS | sed 's/  //'`
+LIBS="$ALSA_LIBS $LIBS"
+AC_MSG_RESULT($ALSA_LIBS)
+
+dnl Check for a working version of libasound that is of the right version.
+min_alsa_version=ifelse([$1], ,0.1.1,$1)
+AC_MSG_CHECKING(for libasound headers version >= $min_alsa_version)
+no_alsa=""
+    alsa_min_major_version=`echo $min_alsa_version | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
+    alsa_min_minor_version=`echo $min_alsa_version | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
+    alsa_min_micro_version=`echo $min_alsa_version | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
+
+AC_LANG_SAVE
+AC_LANG_C
+AC_TRY_COMPILE([
+#include <alsa/asoundlib.h>
+], [
+void main(void)
+{
+/* ensure backward compatibility */
+#if !defined(SND_LIB_MAJOR) && defined(SOUNDLIB_VERSION_MAJOR)
+#define SND_LIB_MAJOR SOUNDLIB_VERSION_MAJOR
+#endif
+#if !defined(SND_LIB_MINOR) && defined(SOUNDLIB_VERSION_MINOR)
+#define SND_LIB_MINOR SOUNDLIB_VERSION_MINOR
+#endif
+#if !defined(SND_LIB_SUBMINOR) && defined(SOUNDLIB_VERSION_SUBMINOR)
+#define SND_LIB_SUBMINOR SOUNDLIB_VERSION_SUBMINOR
+#endif
+
+#  if(SND_LIB_MAJOR > $alsa_min_major_version)
+  exit(0);
+#  else
+#    if(SND_LIB_MAJOR < $alsa_min_major_version)
+#       error not present
+#    endif
+
+#   if(SND_LIB_MINOR > $alsa_min_minor_version)
+  exit(0);
+#   else
+#     if(SND_LIB_MINOR < $alsa_min_minor_version)
+#          error not present
+#      endif
+
+#      if(SND_LIB_SUBMINOR < $alsa_min_micro_version)
+#        error not present
+#      endif
+#    endif
+#  endif
+exit(0);
+}
+],
+  [AC_MSG_RESULT(found.)],
+  [AC_MSG_RESULT(not present.)
+   ifelse([$3], , [AC_MSG_ERROR(Sufficiently new version of libasound not found.)])
+   alsa_found=no]
+)
+AC_LANG_RESTORE
+
+dnl Now that we know that we have the right version, let's see if we have the library and not just the headers.
+AC_CHECK_LIB([asound], [snd_seq_create_event],,
+	[ifelse([$3], , [AC_MSG_ERROR(No linkable libasound was found.)])
+	 alsa_found=no]
+)
+
+if test "x$alsa_found" = "xyes" ; then
+   ifelse([$2], , :, [$2])
+   LIBS=`echo $LIBS | sed 's/-lasound//g'`
+   LIBS=`echo $LIBS | sed 's/  //'`
+   LIBS="-lasound $LIBS"
+fi
+if test "x$alsa_found" = "xno" ; then
+   ifelse([$3], , :, [$3])
+   CFLAGS="$alsa_save_CFLAGS"
+   LDFLAGS="$alsa_save_LDFLAGS"
+   LIBS="$alsa_save_LIBS"
+   ALSA_CFLAGS=""
+   ALSA_LIBS=""
+fi
+
+dnl That should be it.  Now just export out symbols:
+AC_SUBST(ALSA_CFLAGS)
+AC_SUBST(ALSA_LIBS)
+])
+
diff -aurN alsa-patch-bay-1.0.0.orig/m4/fltk.m4 alsa-patch-bay-1.0.0/m4/fltk.m4
--- alsa-patch-bay-1.0.0.orig/m4/fltk.m4	1970-01-01 01:00:00.000000000 +0100
+++ alsa-patch-bay-1.0.0/m4/fltk.m4	2003-05-07 18:35:26.000000000 +0200
@@ -0,0 +1,99 @@
+#
+# fltk.m4
+#
+# You have permission to use this file under GNU's General Public License,
+# version 2 or later
+#
+# Copyright (C) 2002 Robert Ham (node@users.sourceforge.net)
+#
+
+AC_DEFUN([AC_LIB_FLTK],[
+  AC_LANG_PUSH([C++])
+  AC_ARG_ENABLE(
+    [fltktest],
+    AC_HELP_STRING([--disable-fltktest],
+                   [assume fltk is installed and skip the test]),
+    [
+      case "$enableval" in
+        "yes")
+          FLTK_TEST="yes"
+          ;;
+        "no")
+          FLTK_TEST="no"
+          ;;
+        *)
+          AC_MSG_ERROR([must use --enable-fltktest(=yes/no) or --disable-fltktest])
+          ;;
+      esac
+    ],
+    [ FLTK_TEST="yes"
+    ])
+                
+  if test "$FLTK_TEST" = "no"; then
+    AC_MSG_WARN([fltk test disabled: assuming FLTK_LDFLAGS="-lfltk" and FLTK_CXXFLAGS=""])
+    FLTK_LDFLAGS="-lfltk"
+    FLTK_CXXFLAGS=""
+    FLTK_FOUND="yes"
+  else
+    AC_CACHE_VAL(
+      [fltk_cv_prog_fltkconfig],
+      [
+        AC_ARG_WITH(
+          [fltk-config],
+          AC_HELP_STRING([--with-fltk-config=DIR],
+                         [the directory containing the fltk-config program]),
+          [
+            case "$withval" in
+              "yes")
+                if test -d yes; then
+                  FLTK_CONFIG_PATH="yes"
+                else
+                  AC_MSG_ERROR([you must use --with-fltk-config=DIR with DIR as a directory name])
+                fi
+                ;;
+              "no")
+                AC_MSG_ERROR([you must use --with-fltk-config=DIR with DIR as a directory name])
+                ;;
+              *)
+                FLTK_CONFIG_PATH="$withval"
+                ;;
+            esac
+          ])
+
+        if test "$FLTK_CONFIG_PATH" = ""; then
+          AC_PATH_PROG([FLTK_CONFIG], [fltk-config], [no])
+        else
+          AC_PATH_PROG([FLTK_CONFIG], [fltk-config], [no], "${FLTK_CONFIG_PATH}:${PATH}")
+        fi
+
+        if test "$FLTK_CONFIG" = "no"; then
+          AC_MSG_WARN([could not find the fltk-config program - try using --with-fltk-config=DIR])
+          FLTK_FOUND="no"
+        else
+          fltk_needed_version=ifelse([$1], ,no,$1)
+          if test x$fltk_needed_version != xno; then
+            fltk_config_version="$( "$FLTK_CONFIG" --api-version )"
+            AC_MSG_CHECKING([for fltk == $fltk_config_version])
+            if test x$fltk_config_version = x$fltk_needed_version; then
+              AC_MSG_RESULT([$fltk_config_version (ok)])
+              FLTK_FOUND="yes"
+            else
+              AC_MSG_RESULT([$fltk_config_version (not ok)])
+              FLTK_FOUND="no"
+            fi
+          fi
+        fi
+
+        fltk_cv_prog_fltkconfig="$FLTK_CONFIG"
+      ])
+
+    FLTK_CXXFLAGS="$( "$fltk_cv_prog_fltkconfig" --cxxflags )"
+    FLTK_LDFLAGS="$( "$fltk_cv_prog_fltkconfig" --ldflags )"
+    FLTK_FOUND="yes"
+    
+  fi
+  AC_LANG_POP([C++])
+
+  AC_SUBST(FLTK_CXXFLAGS)
+  AC_SUBST(FLTK_LDFLAGS)
+])
